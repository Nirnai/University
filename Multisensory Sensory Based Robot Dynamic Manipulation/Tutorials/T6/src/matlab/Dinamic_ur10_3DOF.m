%This file was atutomatically generated by --Generate_Dinamic--
%the input vector is:
%u=[q1 q2 q3 qp4 qp5 qp6 L1 L2 L4 L6 L7 L9 L3 L5 L8 L10 ]
%NOTE: The function --Genera_Robot_ur10_3DOF_Exe-- must be executed
%before running the simulink-simulator for the first time
function Qpp = Dinamic_ur10_3DOF(u)

%Joint Position
q1=u(1);
q2=u(2);
q3=u(3);

%Joint Velocity
qp1=u(4);
qp2=u(5);
qp3=u(6);

%Kinematic Parameters
L1=u(7);
L2=u(8);
L4=u(9);
L6=u(10);
L7=u(11);
L9=u(12);
L3=u(13);
L5=u(14);
L8=u(15);
L10=u(16);

%Dynamic Parameters
m1=u(17);
m2=u(18);
m3=u(19);

I111=u(20);
I112=u(21);
I113=u(22);
I122=u(23);
I123=u(24);
I133=u(25);

I211=u(26);
I212=u(27);
I213=u(28);
I222=u(29);
I223=u(30);
I233=u(31);

I311=u(32);
I312=u(33);
I313=u(34);
I322=u(35);
I323=u(36);
I333=u(37);

%Gravity
g=u(38);
%Time
t=u(39);
%Viscous Friction Matrix
Beta(1,1)=u(40);
Beta(2,2)=u(41);
Beta(3,3)=u(42);
%Gravity Vector
gx=u(43);
gy=u(44);
gz=u(45);



%Joint Position Vector
Q=[q1; q2; q3];

%Joint Velocity Vector
Qp=[qp1; qp2; qp3];

%Inertia Matrix
M = [... 
  I133 + I211/2 + I222/2 + I311/2 + I322/2 + (9*m3)/40000 + (I311*cos(2*q2 - 2*q3))/2 - (I322*cos(2*q2 - 2*q3))/2 + (3*L9*m3)/100 + I312*sin(2*q2 - 2*q3) + (L3^2*m3)/2 + L7^2*m2 + (L8^2*m2)/2 + L9^2*m3 + (L10^2*m3)/2 + (I211*cos(2*q2))/2 - (I222*cos(2*q2))/2 - I212*sin(2*q2) - (L3^2*m3*cos(2*q2))/2 - (L8^2*m2*cos(2*q2))/2 - (L10^2*m3*cos(2*q2 - 2*q3))/2 + L3*L10*m3*cos(q3) - L3*L10*m3*cos(2*q2 - q3), I213*cos(q2) - I223*sin(q2) - I313*cos(q2 - q3) - I323*sin(q2 - q3) - (3*L10*m3*cos(q2 - q3))/200 - (3*L3*m3*cos(q2))/200 - L3*L9*m3*cos(q2) - L7*L8*m2*cos(q2) - L9*L10*m3*cos(q2 - q3), I313*cos(q2 - q3) + I323*sin(q2 - q3) + (3*L10*m3*cos(q2 - q3))/200 + L9*L10*m3*cos(q2 - q3);...
                                                                                                                                                                                                                          I213*cos(q2) - I223*sin(q2) - I313*cos(q2 - q3) - I323*sin(q2 - q3) - (3*L10*m3*cos(q2 - q3))/200 - (3*L3*m3*cos(q2))/200 - L3*L9*m3*cos(q2) - L7*L8*m2*cos(q2) - L9*L10*m3*cos(q2 - q3),                                                                                                                         m3*L3^2 + 2*m3*cos(q3)*L3*L10 + m2*L8^2 + m3*L10^2 + I233 + I333,                                                        - m3*L10^2 - L3*m3*cos(q3)*L10 - I333;...
                                                                                                                                                                                                                                                                                                                      I313*cos(q2 - q3) + I323*sin(q2 - q3) + (3*L10*m3*cos(q2 - q3))/200 + L9*L10*m3*cos(q2 - q3),                                                                                                                                                    - m3*L10^2 - L3*m3*cos(q3)*L10 - I333,                                                                              m3*L10^2 + I333];
 

%Centripetal and Coriolis Matrix
C = [...
  (qp2*(m3*sin(2*q2)*L3^2 + 2*m3*sin(2*q2 - q3)*L3*L10 + m2*sin(2*q2)*L8^2 + m3*sin(2*q2 - 2*q3)*L10^2 + 2*I312*cos(2*q2 - 2*q3) - I311*sin(2*q2 - 2*q3) + I322*sin(2*q2 - 2*q3) - 2*I212*cos(2*q2) - I211*sin(2*q2) + I222*sin(2*q2)))/2 - (qp3*(2*I312*cos(2*q2 - 2*q3) - I311*sin(2*q2 - 2*q3) + I322*sin(2*q2 - 2*q3) + L10^2*m3*sin(2*q2 - 2*q3) + L3*L10*m3*sin(q3) + L3*L10*m3*sin(2*q2 - q3)))/2, (qp1*(m3*sin(2*q2)*L3^2 + 2*m3*sin(2*q2 - q3)*L3*L10 + m2*sin(2*q2)*L8^2 + m3*sin(2*q2 - 2*q3)*L10^2 + 2*I312*cos(2*q2 - 2*q3) - I311*sin(2*q2 - 2*q3) + I322*sin(2*q2 - 2*q3) - 2*I212*cos(2*q2) - I211*sin(2*q2) + I222*sin(2*q2)))/2 - (qp3*(2*I313*sin(q2 - q3) - 2*I323*cos(q2 - q3) + (3*L10*m3*sin(q2 - q3))/100 + 2*L9*L10*m3*sin(q2 - q3)))/2 + (qp2*(2*I313*sin(q2 - q3) - 2*I213*sin(q2) - 2*I323*cos(q2 - q3) - 2*I223*cos(q2) + (3*L10*m3*sin(q2 - q3))/100 + (3*L3*m3*sin(q2))/100 + 2*L3*L9*m3*sin(q2) + 2*L7*L8*m2*sin(q2) + 2*L9*L10*m3*sin(q2 - q3)))/2, (qp3*(2*I313*sin(q2 - q3) - 2*I323*cos(q2 - q3) + (3*L10*m3*sin(q2 - q3))/100 + 2*L9*L10*m3*sin(q2 - q3)))/2 - (qp2*(2*I313*sin(q2 - q3) - 2*I323*cos(q2 - q3) + (3*L10*m3*sin(q2 - q3))/100 + 2*L9*L10*m3*sin(q2 - q3)))/2 - (qp1*(2*I312*cos(2*q2 - 2*q3) - I311*sin(2*q2 - 2*q3) + I322*sin(2*q2 - 2*q3) + L10^2*m3*sin(2*q2 - 2*q3) + L3*L10*m3*sin(q3) + L3*L10*m3*sin(2*q2 - q3)))/2;...
                                                                                                                                                                -(qp1*(m3*sin(2*q2)*L3^2 + 2*m3*sin(2*q2 - q3)*L3*L10 + m2*sin(2*q2)*L8^2 + m3*sin(2*q2 - 2*q3)*L10^2 + 2*I312*cos(2*q2 - 2*q3) - I311*sin(2*q2 - 2*q3) + I322*sin(2*q2 - 2*q3) - 2*I212*cos(2*q2) - I211*sin(2*q2) + I222*sin(2*qm3*qp3*sin(q3),                                                                                                                                                                                                                                                                                                                                                             -L3*L10*m3*sin(q3)*(qp2 - qp3);...
                                                                                                                                                                                                                                            (qp1*(2*I312*cos(2*q2 - 2*q3) - I311*sin(2*q2 - 2*q3) + I322*sin(2*q2 - 2*q3) + L10^2*m3*sin(2*q2 - 2*q3) + L3*L10*m3*sin(q3) + L3*L10*m3*sin(2*q2 - qm3*qp2*sin(q3),                                                                                                                                                                                                                                                                                                                                                                                          0];
 

%Gravitational Torques Vector
G = [...
 
 - g*gy*m3*(sin(q1)*(L9 + 3/200) - L3*cos(q1)*sin(q2) + L10*cos(q1)*cos(q2)*sin(q3) - L10*cos(q1)*cos(q3)*sin(q2)) - g*gx*m3*(cos(q1)*(L9 + 3/200) + L3*sin(q1)*sin(q2) - L10*cos(q2)*sin(q1)*sin(q3) + L10*cos(q3)*sin(q1)*sin(q2)) - g*gx*m2*(L7*cos(q1) + L8*sin(q1)*sin(q2)) - g*gy*m2*(L7*sin(q1) - L8*cos(q1)*sin(q2));...
                g*gx*m3*(L3*cos(q1)*cos(q2) + L10*cos(q1)*cos(q2)*cos(q3) + L10*cos(q1)*sin(q2)*sin(q3)) - g*gz*m3*(L3*sin(q2) + L10*sin(q2 - q3)) + g*gy*m3*(L3*cos(q2)*sin(q1) + L10*cos(q2)*cos(q3)*sin(q1) + L10*sin(q1)*sin(q2)*sin(q3)) - L8*g*gz*m2*sin(q2) + L8*g*gx*m2*cos(q1)*cos(q2) + L8*g*gy*m2*cos(q2)*sin(q1);...
                                                                                                                                                        L10*g*gz*m3*sin(q2 - q3) - g*gy*m3*(L10*cos(q2)*cos(q3)*sin(q1) + L10*sin(q1)*sin(q2)*sin(q3)) - g*gx*m3*(L10*cos(q1)*cos(q2)*cos(q3) + L10*cos(q1)*sin(q2)*sin(q3))];
 

Tao=[u(46);u(47);u(48)];

Qpp=(M)\(Tao-C*Qp-G-Beta*Qp);
