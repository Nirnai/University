cmake_minimum_required(VERSION 2.8.3)
project(imu_project)

## Find catkin macros and libraries
## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)
## is used, also find other catkin packages

#SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")

find_package(catkin REQUIRED COMPONENTS
  roscpp
  sensor_msgs
  geometry_msgs
  std_msgs
  tf
  tf_conversions
  visualization_msgs
  tf2_ros
  message_generation
)

## System dependencies are found with CMake's conventions


##############################################################################
# Eigen
##############################################################################

find_package(Eigen3 REQUIRED)
#add_definitions(DEF)

##############################################################################
# Messages, Services and Actions
##############################################################################
add_message_files(
  FILES 
  DesiredState.msg
)

generate_messages(
  DEPENDENCIES
  geometry_msgs
)

###################################
## catkin specific configuration ##
###################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS
  LIBRARIES kalman
  CATKIN_DEPENDS roscpp rospy std_msgs tf tf_conversions visualization_msgs geometry_msgs tf2_ros message_runtime
  DEPENDS Eigen3
  #DEPENDS system_lib
)

###########
## Build ##
###########

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
include_directories(
  ${catkin_INCLUDE_DIRS}
  src
  ${roscpp_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR} #Needed to find all headers generated by the uic (Qt)
)

# Define the library target
add_library(kalman src/kalman_filter.cpp)
target_link_libraries(kalman ${roscpp_LIBRARIES} ${catkin_LIBRARIES})
set_target_properties(kalman PROPERTIES LIBRARY_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/lib)
##############################################################################
# Sections Library Enable for Releases
##############################################################################
#link_directories(${PROJECT_SOURCE_DIR}/lib)

##############################################################################
# Sections Tutorials
##############################################################################

# VISUALIZATION NODE
add_executable(tf_pub src/tf_pub.cpp)
target_link_libraries(tf_pub ${catkin_LIBRARIES} ${roscpp_LIBRARIES})

add_executable(imu_acc_pub src/imu_acc_pub.cpp)
target_link_libraries(imu_acc_pub ${catkin_LIBRARIES} ${roscpp_LIBRARIES})

add_executable(kalman_pub src/kalman_pub.cpp src/kalman_filter.cpp)
target_link_libraries(kalman_pub kalman ${catkin_LIBRARIES} ${roscpp_LIBRARIES})

add_executable(pos_pub src/pos_pub.cpp)
target_link_libraries(pos_pub ${catkin_LIBRARIES} ${roscpp_LIBRARIES})

add_executable(calibration src/calibration.cpp)
target_link_libraries(calibration ${catkin_LIBRARIES} ${roscpp_LIBRARIES})

add_executable(shake_sensor src/shake_sensor.cpp)
target_link_libraries(shake_sensor ${catkin_LIBRARIES} ${roscpp_LIBRARIES})
